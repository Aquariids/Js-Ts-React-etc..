
/*
Регулярнеые выражения -это механизм для поиска и замены текста. В строке, файле, нескольких файлах... 
Их используют разработчики в коде приложения,
тестировщики в автотестах, да просто при работе в командной строке
*/

// любое регулярное выражение состоит из двух частей. 
// 1: это паттерн - Это по сути шаблон, шаблон что мы ищем в строке, или что пытаемся удалить итд
// 2: это флаг - есть 3 классических флага
/*
{
    1 - i - если мы хотим что то найти вне зависимости регистра
    2 - g - когда пытаемся найти несколько вхождений
    3 - m - включает многострочный режим. строки могут быть и с переносами тут флаг m нам и пригодится
} их можно комбинировать /n/igm - вот так
*/

// что бы создать регулярное выражение мы можем  пользоваться несколькими способами
// первый вариант это при помощи конструктора(не используется в 99% )
//   new RegExp('pattern','flags');
//   Второй более короткий вариант
//   /pattern/flags 

// Некоторые методы строк которые работают с регулярными выражениями
//1) search() - этот метод очень простой и ищет всегда первое совпадение
//2) match() - этот метод вернет массив с кусочком строки который искали, с его индексом, и сама строка и свойство groups не знаю чи шо это
// c флагом g мы получим массив со всеми найденными элементами
const ans = prompt('Введите ваше имя'); // тут введем имя
const reg = /n/i; // тут мысоздали наше выражение ищем маленькую букву n


// console.log(ans.search(reg)); // используем метод search(тут наше рег выражение)
// мы ввели anna и получили в консоль 1 - это индекс по которому мы нашли первый результат. Если n не будет получим -1
// для того что бы найти все буквы n или все в незовисимости большая или маленькая и тд. Для этого используем флаги
console.log(ans.match(reg));
//3) replace() МОжем что-то заменить
    //1 фаргумент это что мы меняем
    //2 это то на что мы меняем
const pass = prompt('ПАРОЛЬы');
console.log(pass.replace(/\./g, "*")); // в первый аргумент можем поместить регулярное выражение. записываем его прямо здесь без новых переменных
// точка в рег выражениях значить, что мы берем все элементы которые попадут в строку
// что бы поставить саму точку нужно экранировать ее поставить обратный слеш \ - он указывает что дальше идет не спец символ
console.log('12-30-56'.replace(/-/g,'')); // с помощью replace и регв уберем все дифисы в строке


//4) test() - это уже метод самого объекта регулярного выражения
// он проверяет есть ли в рег выражение то что мы ищем
// то есть если мы ищем маленькие буквы n и в имени оно есть и регв срабатывает, то нам вернет true если нет то false
console.log(reg.test(ans)); // Возвращает true или false,


// Если нам нужно искать целый класс символов, например слова или цифры или пробелы 
// для этого в рег выр есть понятие классы
//1) \d - ищем цыфры
//2) \w - ищем все слова(буквы)
//3) \s - ищем все пробелы
//Так же есть обратные классы
//1) \D - ищем не числа
//2) \W - ищем не буквы
//3) \S - Ищем не пробелы
// короче все просто в верх регистре

const num = prompt('Введите число');
const regN = /\d/g;
console.log(num.match(regN));
// мы можем все это комбинировать как душе угодно

const str = 'my name is R2D2';

console.log(str.match(/\w\d\w\d/i)); // мы полуим R2D2
console.log(str.match(/\W/ig)); // получим все пробелы из текста. Цифр нет потому что  у нас там строка.
//