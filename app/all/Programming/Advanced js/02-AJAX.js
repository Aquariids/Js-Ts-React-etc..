/*
*                                         AJAX
AJAX— это аббревиатура, которая означает Asynchronous Javascript and XML.На самом деле, AJAX не является новой технологией, так как и Javascript, и XML существуют уже довольно продолжительное время,
    а AJAX— это синтез обозначенных технологий.AJAX чаще всего ассоцириуется с термином Web 2.0
и преподносится как новейшее Web - приложение.


При использовании AJAX нет необходимости обновлять каждый раз всю страницу, так как обновляется только ее конкретная часть.Это намного удобнее, так как не
приходится долго ждать, и экономичнее,
так как не все обладают безлимитным интернетом.Правда в этом случае, разработчику необходимо следить, чтобы пользователь был в курсе того, что происходит
на странице.Это можно реализовать с использованием индикаторов загрузки,
    текстовых сообщений о том, что идёт обмен данными с сервером.Необходимо также понимать, что не все браузеры поддерживают AJAX(старые версии браузеров и текстовые браузеры).Плюс Javascript может быть отключен пользователем.Поэтому, не следует злоупотреблять
использованием технологии и прибегать к альтернативным методам представления информации на Web - сайте.*/


/*
*                                                       Get and Post - запросы

Get запрос - направлен на то, что бы получить какие то данные от сервера
в нашем случае мы будем получать курс валюты у нашего current.json бекенд части (сервер)
get запросы показывают товары например в магазине на сайте

Post - запрос  это постить запросы, например регистрация на сайте, мы вводим наши данные и постим их на сервер, или например когда загружаем
файлы 
*/
/*
 *                                               Не современные способы AJAX. Современный в файле 5
                                                    https://learn.javascript.ru/xmlhttprequest
 */

// будем поучать данные с сервера и использовать у себя
const inputRub = document.querySelector('#rub'),
    inputUsd = document.querySelector('#usd');


inputRub.addEventListener('input', () => { // событие инпут сробатывает когда в инпуте что-то меняется
    const request = new XMLHttpRequest(); // создали экземпляр с нужными нам свойствами и методами

    // open(); - собирает настройки которые в будущем помогут сделать запрос. принимает в себя несколько аргументов

    request.open('GET','js/current.json'); // путь у url строим относительно index.html
                    /* 1 - method: это тот котоырй используется для запроса(get post и тд)
                    2 -  url: это путь к нашему сервевру
                    3 - async: этот аргумент отвечает за асинхронность - в нем по умолчанию стоит true, можн опоставить false, но тогда это уже будет синхронный код
                    (синхронный код - идетпо порядку, если какая то операция долго выполняется весь код будет ее ждать
                    асинхронный код рабоает обратным способом, он не блокирует код, так работают сет таймауты и интервалы 
                    AJAX запросы по умолчанию являются асинхронными
                    4 - login - логин: некоторые запросы мы можем делать только имея пароль и логин 
                    5 - pass  - пароль
  ) */
  //     setRequestHeader(); -  устанавливает значения HTTP заголовков. Вызывается после open() но до send()
//                        говрим что есть тип опр тип - тут уже сам тип это наш json и далее кодировка, самая стандартная
    request.setRequestHeader('Content-type', 'application/json; charset=utf-8');

    request.send(); // отпроавляем наш запрос.  send: принимает в себя body -  это данные которые уходят на сервер, но это в Post запросе в get этого нет, потму что мы получаем их

                                // свойства

// статусы гуглятся вот так (Коды ответа HTTP)
// 1) status - показывает статус нашего запроса, это 404 -  файла нет. 0, 200, 403 и тд. Все мы это видили в браузере
// 2) statusText   - это текстовое описание от сервера
// 3) response - это ответ от сервера, это то что нам ответил бекенд разработчик, то что мы должны использовать на клиенте
// 4) readyState - возвращает текущее состояние объекта, нашего запроса)

/*  readyState будет возвраща ть вот такие штуки
Значение	Состояние	Описание
    0	        UNSENT	    Объект был создан. Метод open() ещё не вызывался.
    1	        OPENED	    Метод open() был вызван.
    2	        HEADERS_    RECEIVED	Метод send() был вызван, доступны заголовки (headers) и статус.
    3	        LOADING	    Загрузка; responseText содержит частичные данные.
    4	        DONE	    Операция полностью завершена.
*/

                                // События объекта  XMLHttpRequest(
// 1 - readystatechange - следит за свойством readyState. например когда запрос изменится с 0 на 1 - срабоает событие потом с 3 на 4 и опят ь
request.addEventListener('readystatechange',()=>{ 
    // можем написать условие
    if (request.readyState === 4 && request.status === 200) { // тут мы узнаем, если у нас 4 - операция завершена и статус 200 - это значит Ок - хорошо
        // Так же чаше использует событие load оно срабатывает один раз когда запрос готов
        // мы удалем  request.readyState === 4 &&
        // остовляя только request.status === 200 а в обытии меняем  readystatechange на load
        console.log(request.response);
        const data = JSON.parse(request.response);
        inputUsd.value = (+inputRub.value / data.current.usd).toFixed(2);
        

    }
 else {
        inputUsd.value = 'что-то пошло не так';
 }
});

});
