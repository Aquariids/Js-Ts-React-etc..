// gulp это система сборки. Он позваоляет работать с другими плагинами, они делают разные приколюхи, а gulp их собирает в едино
/* Вот понятная вырезка из одной статьи
Gulp — это менеджер для автоматизации рутинных задач при веб-разработке.
Например, я использую Gulp для оптимизации изображений перед публикацией на сайте,
конвертации coffee script и sass-кода в javascript и css,
а также уменьшения размера получившихся файлов стилей и скриптов.
Но это капля в море от всех его возможностей.
*/

// npm - это менеджер пакетов, входящий в состав node js, поэтому первым делом на пк нужно установить node js
// пакеты - это один или несколько js файлов, это могут быть библиотеки или какойто инструмент
// package.json - это файл который содержит в себе инфу о приложении, там будет находиться все, что мы установили

// скачать пакет можно  командой npm i (Здесь имя пакета)
// или же в файле package.json. Указыаем в нем название и версию после пишем в консоль npm i
/*
{
  "devDependencies": {
    "canvas-chart": "~1.3.0"
  }
}

по сути npm i и установит, все что у вас описанно в файле package
*/

// Вернемся к GULP
// После установки node js устанавливаем сам gulp глобально
// пишем в консоль npm i --global gulp-cli - это делается один раз, на чистой системе
// далее пишем npm init - там мы указываем описание, свое имя, мыло  и тд, это все будет в package.json
// далее пишем npm i --save-dev gulp - здесь мы устанавливаем gulp локально
// --save-dev - это сохранение версии в файле package.json 
/* пример из моего файла. Здесь все что нужно для разработки. Все эти пакеты сохранятся
devDependencies": { 
    "browser-sync": "^2.26.14",
    "del": "^6.0.0",
    "gulp": "^4.0.2",
    "gulp-autoprefixer": "^7.0.1",
    "gulp-sass": "^4.1.0",
    "gulp-uglify-es": "^2.0.0",
    "jquery": "^3.6.0"
  },
"dependencies": {    у меня все через жопу, тут должен быть только @fancyapps/fancybox
    "@fancyapps/fancybox": "^3.5.7",
    "gulp-concat": "^2.6.1",
    "gulp-imagemin": "^7.1.0"
  },

  хороший комент из инета
  Компиляторы-транспиляторы-трансляторы (типа Coffee, LESS, Jade), тест-раннеры, 
  стайл-чекеры и линтеры (mocha, chai, karma, (js|es)lint, jscs),
  плагины для таск-раннеров (grunt-contrib-watch, gulp-jade) — все это обычно ставится как --save-dev,
  потому что нужно только тем, кто контрибьютит в этот проект, работает с его кодом.

Библиотеки и фреймворки (expressjs, jquery, backbone), на основе которых работает ваш код, без которых ваш код не запустится у его потребителя — ставятся как --save.

*/

// у нас появится папка node_modules - в ней хранятся все плагины

// далее создаем папки app, dist
// в app будут все наши файлы js html css sass и тд. Там мы будем работать
// в dist у нас будет находиться уже наша сборка из app, то есть все файлы уже будут сжатые, чистенькие и тд
// в корне будет файл gulpfile.js - мы сейчас в нем


// Далее заполняем наш gulpfile.js

// Подключаем плагин gulp-sass
// пишем npm i --save-dev gulp-sass

// далее в gulpfile.js (ЗДЕСЬ ПРЯМ) Пишем код для работы этого плагина

const {src, dest, watch, parallel } = require('gulp'); // задаем опр переменным всю мощь галпа. Тут у нас штуки которые юзаеются именно из галпа, мы их не устанавливаем ниоткуда, берем из самого галпа
// src Для путей, dest для выгрузки файлов, watch для слежения. Это по сути методы gulp
// series - вызов задач последовательно;
// parallel - вызов задач параллельно.
// раньше писали так return gulp.src('src/**/*.js') а сейчас мы заранее прописали gulp в src, поэтому указываем просто src
// или gulp.dest() и так далее
const concat = require('gulp-concat');
const uglify = require('gulp-uglify');// это для минификации файлов js
const browserSync = require('browser-sync').create(); // тут дополнительно пишем .create() так написанно в документации, нужно ее всегда чекать
const scss = require('gulp-sass'); // создаем переменную и используем функцию require('тут пишем сам наш плагин, мы в переменную scss передаем все возможности самого gulp-sass Передаем всю мощь так сказать')
/*
require() не является частью стандарта JavaScript API. Но в Node.js это встроенная функция со специальным назначением: загружать модули .
короче require() заходит в gulp-sass и находит там все данные и все что он возвращает хранится теперь в переменной scss
*/

function styles () { // создаем функцию которая будет заниматься нашей конвертацией scss в css
  return src('app/scss/**/*.scss') // здесь находим файлы с помощью src с которым будем работать
    .pipe(scss({outputStyle:'compressed'}))// мы нашли наши файлы и записываем далее его в .pipe типо труба через которую они пройдут и  изменятся {outputStyle:'compressed'} - значит что он будет сжатым
    .pipe(concat('style.min.css')) // тут устанавливаем gulp concat, мы с конкатинируем все наши файлы в один style.min.css
    // пишем npm install --save-dev gulp-concat
    // выше создаем переменную,  делаем все так же как и с scss
    // В pipe добавляем concat и указываем имя файла который на выходе будет
    // **/ .pipe - указываем каждый раз когда хотим что-то сделать(мы типо говорим используй этот плагин, pipe переводится как труба, вот плагин через нее проходит и работает)
    .pipe(dest('app/css')) // далее говорим куда выкидыаем наш файл, Для этого пишем dest и указываем путь, так же сверху добавляем dest к src
    .pipe(browserSync.stream()); // для обновления страницы
}

function watching () {  // создаем функцию которая будет следить за файлами
// здесь не нужен return
watch(['app/scss/**/*.scss'],styles); // **/*.scss - это значит что он будет следить за всеми файлами scss в папке scss, далее пишем имя файла который будет запускаться при измененииц
watch(["app/*.html"]).on('change', browserSync.reload); // следим за html. все из документации) 
watch(['app/js/**/*.js','!app/js/script.min.js'], scripts);
}

function browsersync () { // все что я тут написал есть в документации
  browserSync.init({
    server: {
      baseDir: "./app",
      directory: true
    },
    browser: "chrome"
  });
}

function scripts () { // делаем функцию для скриптов
    return src([
      'node_modules/jquery/dist/jquery.js', // подключаем jquery 
      'app/js/script.js' //  и наш основй js файл
    ])

    
    .pipe(concat('script.min.js')) // так же конкатинируем все в min js
    .pipe(uglify()) // минифицируем
    .pipe(dest('app/js')) // кидаем в app js
    .pipe(browserSync.stream()); // Обновляем
}
// далее ставим gulp uglify, писать орпять npm i не буду и так все понятно

// Далее установим browser sync
// пишем npm i --save-dev browser-sync
// вверху создаем переменную, все как всегда)

exports.styles = styles;  //  делаем нашу функцию публичной, теперь введя в консоль gulp styels она выполнится 
exports.watching = watching;
exports.browsersync = browsersync;
exports.default = parallel(browsersync,styles,watching,scripts); // тут указываем по дефолту, это значит, что если мы просто введем в консоли gulp, то выполнится parallel и все чтоу  него в скобках
// это все будет работать параллельно