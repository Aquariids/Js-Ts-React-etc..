/*
*           Тут будут методы перебора массивов. Методы посложнее так сказать
*/

/*
*                       1) Filter
*/

const names = ['Ivan','Dima','Shrek','pisapopa']; // создадим массив
// с помощью филтер мы можем профильтровать наш массив и получить например все имена в которых меньше 5 символов
// тут может быть что угодно. Например получить товары которые будут стоить меньше 1000 рублей
// метод filter() будет возвращать нам новый отфильтрованный массив


const shortNames = names.filter(function (name){ // здесь name  - это каждый отдельный элменет внутри нашего массива
    return name.length < 5; // возврщаем все имена которые меньше 5 символов    
} );// внутрь передаем колбек функцию как в forEach.

/*
*                               2) map
*/
// map позволяет взять исходный массив и изменить каждый элемент внутри и на выходе получить новый массив с изменнеными данными


const answers = ['ivaN','annA', 'Hello']; // допустим нам пришел массив с тем что вводили пользватели.
const result =  answers.map(item =>{
return item.toLowerCase(); // берем каждый элменет и приводим его в нижний регистр
}); 



/*
*                               3) every/some
                оба метода возвращают нам булевые значения
*/
//1) some - перебирает массив и если там есть, то что мы ищем, то выдает нам true
const some = [4,'dsf','sss']; 
console.log(some.some(item => typeof(item) === 'number')); // проверяем есть ли в массиве хотя бы одно число

//2) every -  перебирает массив и  если все наши элементы подходят под условие, то нам вернет true 

console.log(some.every(item => typeof(item) === 'number')); // false. Так как у нас только одно число в массиве. Если массив будет из чисел, то будет true ну или все строки и тд



/*
*                               4) reduce
*/

const numb = [5,1,3,2,6,9,8,4]; // допустим нам нужно получить сумму всех этих элементов
// можно с помощью forEach все это перебрать и сложить в какую то глобл переменную все значения или циклом, а можно с reduce
const res = numb.reduce((sum,current)=>{ // так же вернет нам новый результат котоырй мы помещаем в res.
return sum + current; // при первом запуске sum автоматически равна всегда 0, в current будет 5
// далее мы в sum + current по сути 0 + 5 в sum уже 5. и так далее потом в current 1 в sum 5 это прибавляется и в sum уже будет 6 и тд тд
},1);  // так же после колбек функции в reduce, мы моэем указать аргумент который принимает в себя начальное значение sum

console.log(res); // 38, но после колбека мы поствали 1 и оно пошло в sum, так что 39
//колбек в reduce принимает в себя два аргумента
// первый это все сумма, второй это каждый элемент 
// так же reduce моэно использовать со строками
const strArr = ['я','л','о',"х"];
const resArr = strArr.reduce((sum,current)=> `${sum},${current}`); // так же можем слепить строки, тут мы добавили между ними запятые
console.log(resArr);
/*
*           Разница forEach, map, filter
*/
// forEach это функция которая перебирает элементы, а в filter это функция которая перебирает элементы и возваращет те которые подходят нам под условие
// коотко разница в том, что forEach просто пускает цикл и выполняет наш колбек. а filter пускает цикл, выполняет кобек и проверяет возращаемое значение. Если оно верное, то оно будет положено в новый массив
// map по сути тот же forEach только он возвращает новый массив измененный, а forEach нет. forEach меняет исходный  массив
// forEach выбрасывает return и поэтому мы получаем undefiend. из за этого мы не можем привязать forEach куда то, а filter или map можем. Так как они возвращают новый массив.
// Например.

const answer2 = ['IVan','DimAN','Dimaadk','shrEk'].map(item => item.toLowerCase()).filter(item => item.length < 5);
console.log(answer2); // получаем ivan в маленьком регистре. так как map возвращает, то мы на этом можем юзать filter у forEach Был бы undefiend поэтому применить что то дальше не получилось бы
// тот новый массив который нам дает map мы по сути сразу помещаем в answer2, то же самое делает и filter
// так что не обязательно всегда делать новый массив и туда помещать




/*
*                                          Немного практики
*/



const obj = { //  возьмем для примера объект который мы якобы получили от сервера. И нам нужно вытащить имена людей из этого объекта
    ivan:'persone',
    anna:'persone',
    dog:'animal',
    cat:'animal'
};


const newArr = Object.entries(obj) // с помощью этого метода получаем матрицу, массив в массиве. тут получаем и ключ и значение
// так  же есть object.keys() и object.values()  в первом случае мы получим ключи во втором значения в виже массива
.filter(item => item[1] == 'persone') // фильтурем наш массив и  так как мы знаем что под значения у нас под индексом 1, они идут вторыми, то у каждого item а это наш кажлый отдельный массив с ключ:значение. Мы проверяем значение на persone
.map(item => item[0]); // далее возврщаем только 0 элементы( первыве) и так мы получаем наш массив с именами

const newObj = Object.assign({},newArr);

console.log(JSON.stringify(newObj)); // не знаю заем но вернул в объект с помощью object.assign и в json, все можем отправлять ГЫЫЫЫЫЫ