/*
*          1 - Бинарный поиск 
*/


const array = [0,1,2,3,4,5,6,7,8,9]; // массив в котром ищем
let count = 0; // счетчик наших действий
// нам нужно получить центральный элемент нашего массива

function binarySearch(array,item) {
    let start = 0; // это позиция нашего первого элемента
    let end = array.length; // это позиция последнего элемента(вычесляется по длине массива)
    let middle; // среднйи элемент будет высчитывать  в цикле

    // так же нужно две вспомогательные переменные
    let found = false;  // это переменная  помогает понять нашли мы элемент или нет, некий такой флаг
    let position = -1; // позиция элемента которую мы будем возвращать из функции, если элемент не найдн мы будем возвращать -1
    while(found === false && start <= end) { // цикл будет работать до тех пор пока мы не нашли элемент это наш false в found или же пока начальная и конечная позиция не поровняются
        count++;
        middle = Math.floor((start + end) / 2); // с помощью floor избавляемся от не целых чисел.
        // здесь мы высчитываем позицию центрального элемента( стартовую складываем с конечной и делим на 2)
        // далее проверяем(если элемент находящийся в массиву по индексу который мы посчиатли равен тому элементу который мы ищем)
        // found ставим true и устанавливаем позицию
         // считаем кол итераций
        if(array[middle] === item) {
            found = true;
            position = middle;
            return position; // останавливаем цикл
        }

        if (item < array[middle]) { // если нужный нам элемент меньше чем элемент который находится в самой середине, то нам нужна только левая часть массива
            // так как искомый элемент меньше чем центральный

            end = middle - 1; // мы присваевам в поз посл элемента наш центральный и - 1 (если наше искомое число меньше центрального, то мы как бы добавляем в end наш центарльный элемент и отнимаем один)
                                    // отнимаем потому что мы уже проверили центральный элемент например( мы ищем 4, список у нас из 10, середина 5)
                                    // 4 меньше чем 5, поэтому мы знаем что остальные 6 7 8 9 10 нам не нужны и 5 включительно, так как мы уже проверили центральное число с искомым, на троке 27
                                    // поэтому и -1, и мы получаем 4 потом уже середина от 4 это 2. наше искомое 4 больше чем 2, поэтому мы избавляемся от 1 и 2 включительно. 
                                    // прибалвяя наше центральное число в переменную с началом массива start, то есть мы уже меняем начало массива и +1 так как центральный элемент(2) уже проверен
                                    // далее в start у нас 3 а в end 4 середина это 3. 3 меньше чем 4 поэтому опять в start добавяем цетнр эл(3 + 1) = 4
                                    // далее ищем середину start(4) + end(4) =  8 / 2 = 4. так вот и нашли наш элемент за 4 шага

        } else { // иначе если искомый элемент больше, делаем на оборот. 
            start = middle + 1;
        }
    }

    return position;
}

// ответ почему array[middle] а не просто ищем по middle, мы ищем по индексу, у нас будет отсортированный массив, это обязательно
// и допустим у нас будут там имена, а не цифры, у каждого имени так же будет индекс, по нему мы и булем проверять, поэтому так и пишем


console.log(binarySearch(array,1));  
console.log(count);

