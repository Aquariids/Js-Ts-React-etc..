                                        // Типы данных  в js!!
// Так как у нас (слабо) Динамически типизированный язык,
// то ебашь че хош // let numbers = 1; -  хоть так
// let numbers = 1.4; - хоть так
// и хоть так [1,2,1.5,'pedikri',{}]

//  метод! проверка на тип данных

typeof(/*тут переменная или шо там */); // вроде и без скобок можно)

// есть парочка интересных ошибков  в js
// если в typeof добавить null, то он выведет object - это ошибка, но куда без них

                                    /*ПРОСТЫЕ ТИПЫ  */
/* Числа (numbers) - 1,2,3 */ // макс число 2 в 53 степени!
const numbers = 1;
/* СТРОКИ(String) */
const string = 'Привет, я пэдик'; // Строки всегда в ковычках! '123' - Это СТРОКА!!
/* Логичискйи тип(boolean) */
const booleanTypes = true; // либо да брат!
const __booleanTypes = false; // либо нет брат!
/*Тип данных НАЛ(null) */ // НИЧЕГО НЕ СУЩЕСТВУЕТ 
const eternal = null; // 
console.log(pisa);
/* тип андефаинд(undefined) */ //ЧТО_ТО СУЩЕСТВУЕТ НО ХЕР ПОДИ РАЗБЕРИ ЧЕ
const NotEternal = undefined; //JShint в ахуе просто
console.log(NotEternal); // undefined
/* СИМВОЛ(Symbol) */
const id = Symbol('символ'); // создаешь символы! и хуй знает зачем))
/*BigInt(бигИНТ) */ // позволяет работать с числами больше чем 2 в 53!
const theBiggestInt = 9007199254740991n; //JShint живи!
const alsoHuge = BigInt(9007199254740991);


                                        /* Комплексный тип данных (ОБЪЕКТЫ)  */

                                        /*СПец Объекты  */
                                        /*МАССИВЫ */

const arr = ['ss',1,{},[]]; // - массивы частный случай объекта!
/* А с хуя это частный случай объекта? а вот с того, что здесь такие же
    знаения и ключи, просто тут  ключи фиксированные!  
    массивы нужны для того, что бы строго по порядку распологать элементы
    если написать индекс эелемента, то увидим, что это очень похоже на объект
        просто ключ фиксированный! */
                  0   1  2  3                   
    const arr = ['ss',1,{},[]];
//хранит любой тип данныъ
 //хранит данные строго по порядку!

console.log(arr[0]); // 'ss' - так мы берем из массива нужный элемент,
                     //через индекс. нумерация в прогр начинается с 0 -  первый элемент!!!


                                        /*Функции! */

let fun = function(){};

() => {

};
function func () {}; // ну вы поняли))))

/* Объект Даты */
let now = new Date();

/* регулярные выражегния! и ошибки! */

                                                // ОБЫЧНЫЕ ОБЪЕКТЫ

let obj = { 
     // Описываем объект ключ: значение!
     // ключ - это свойство, а после : Значение этого свойства!      
    /*  свойство объекта(name) и значение('димка')! - */ 
    name: 'димка', 
    age: 24,
    gay: false

};

console.log(obj.name); // через точку обращаемся к свойству! или же [''], но лучше точка


                                                // ЕЩЕ ЕСТЬ ЧИСЛОВЫЙ ТИП ДАННЫХ ИФИНИТИ и NaN (примитив!)

const inf = Infinity; // - бесконечность
console.log(4/0); // Infinity

const __inf = -Infinity; // - минус бесконечность вау!
console.log(-4/0); // -Infinity

const nAn = NaN; // not a number (короче если всякую хуету с числами мутишь, 
// то, будет такая шляпа. Умножаешь, то, что нельзя умножать и тд)
console.log('string' * 19); // NaN

