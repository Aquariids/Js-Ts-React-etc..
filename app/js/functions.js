'use strict';

                            // ФУНКЦИЯ!

// имя функции желательно писать глаголом с препиской действия!!
// у нас это глагол показать! показать какое то сообщение!
function showMessage(/* тут аргументы!(параметры)*/) {

    // тело, по классике что то выполняет)
    console.log('hello 42');

}

showMessage(); // вызываем функцию. вызов всегда сопровождается скобками, без скобок можно передовать функцию как ссылку в аргумент
// другой функции,  но об этом не здесь, а в колбек функциях)
// когда функция вызывается, мы можем дать  ей данные которые она бует использовать внутри себя

// ПРИМЕР:
function showText(text) {
    console.log(text);

    
}

showText('я педик');  // эту строку мы передали в параметр text, можно передать два и сколько угодно, просто через запятую,
// ну и два параметра нудно указать так же через запятую
// 
// есть какая то фича Для указания этих переменных, но я пока ее не знаю, как узнаю напишу
//                                                              АНОНИМНЫЕ ФУНКЦИИ

//                                                          Переменные в функциях
let numTwo = 22; // глобальная переменная
let x = 14;
function showVariables () {
    let num = 20; // это лок переменная и юзать мы ее можем только в функции!
    numTwo = 10; // тут мы используем глобальную переменную, перезаписываем ее
    let x = 12; // две одинаковых переменные, но эту не видно! она локальная в функции!!
    console.log(x); // мы можем здесь ее посмотреть! тут уже будет 12!
    // но если мы удалим x в функции, то функция будет искать такую переменную выше, функция
    // выполняет все поэтапно, сначала мы создаем num, потом находим numTwo и функция начинает ее искать внутри, она не находит
    // и начинает искать выше, находит ее там, и перезаписывает, потом мы создаем x и обращаемся к ней в log, и вот если x она
    //не найдет внутри, она начнет искать выше, и тогда у нас покажет 14
    // 
    
}
showVariables();
console.log(numTwo); // 10
console.log(x); // 14, 



                // RETURN -  когда функция встречает ретерн, она преращает свое дейтсвие и вовращает что-то!

function calc (a,b) {
    return (a + b); // ретерн вернет нам сумму чисел!
    // если здесь что-то написать, то это не будет работать это называется Unreachable(недоступен)
    console.log();
    //  код должен быть до ретерна
}

console.log(calc(10,20)); // помещаем в наши аргументы значения!
console.log(calc(5,30)); // и так ее можно юзать сколько хочешь
// если удалить ретерн, То будет undefined, что-то есть , но мы этого не видим
// для этого и нушен ретерн, он из функции возвращает нам что-то в реальный мир!
// ПРИМЕР:


function ret () {
    let num = 50; //создали лок переменную 
    return num; // закончили функцию и вернули значение переменной в реальный мир!
}

const retNum = ret(); //   вызываем функцию, она срабатывает и возвращает в нашу переменную значение из num

console.log(retNum); // показываем его!

//                          FUNCTION DECLARATION (функция деклорейшн)


// создается до начала выполнения скрипта, можно вызвать перед объявлением
// наша html загружается, грузит все по порядку, потом доходит дело до скрипта нашего
// скрипт начинает загружаться и первом делом браузер находит все переменные var, если она там есть и все функции деклорейшн
// он их создает, Объявляет и после этого наш код начинает выполняться по порядку!
// это нам позволяет использовать функцию вот так:
console.log(foo(1,3)); // мы вызвали функцию и задали ей аргументы
function foo (a,b) {     //  а теперь мы ее создали, прекол, да?
                        // да, но все работает. Это я описал чутка выше!
    // код
    return (a + b);
}// при функции деклорейшн не нужно ставить ;

//                         FUNCTION EXSPRESSION

// создается лишь тогда, коггда до нее доходит поток кода, можно вызывть, только после объявления 
// по сути работате как просто переменная, поток ее создает, когда встречает 
let fooo = function () {
    console.log('hello');
    // код
}; // но в експрешн надо!, так как она в переменной, наша функция это внутреннее состояние нашей переменной!

fooo();


                                        // СТРЕЛОЧНАЯ ФУНКЦИЯ

// она не имеет своего контекста!, если функция в одну строчку, то можно опускать скобки
// выглядеть  будет так (a,b) => a + b;
// а если один аргумент, то можно так  a => a + 10;
const calcal = (a,b ) => { return a + b; };

// примеры с learn js

let func = function(arg1, arg2, ...argN) {  // наша експрешн функция!
    return expression;
    };

 // let func = (arg1, arg2, ...argN) => expression // то же самое в виде стрелочной функции! короче, не правда ли?

        let sum = (a, b) => a + b;

/* Более короткая форма для:

let sum = function(a, b) {
    return a + b;
};
*/

alert( sum(1, 2) ); // 3

// тоже что и
// let double = function(n) { return n * 2 }
let double = n => n * 2;

alert( double(3) ); // 6


// примерчик с нашим тернарным оператором
let age = prompt("Сколько Вам лет?", 18);

let welcome = (age < 18) ?   // создаем переменую в ней наш прекрасный оператор, если возраст меньше 18
//                               вызываем стрел функцию и выплывает модал окно с привет, иначе  здравсвуйте,
    () => alert('Привет') :
    () => alert("Здравствуйте!");  // тут у нас и условие и две функции, но как коротко выглядет? супер оптимизация, надо научиться юзать

welcome(); 